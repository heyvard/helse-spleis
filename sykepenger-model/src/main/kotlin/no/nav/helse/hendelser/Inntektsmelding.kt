package no.nav.helse.hendelser

import java.time.LocalDate
import java.time.LocalDateTime
import java.util.*
import no.nav.helse.etterlevelse.Subsumsjonslogg
import no.nav.helse.etterlevelse.`춶 8-10 ledd 3`
import no.nav.helse.forrigeDag
import no.nav.helse.hendelser.Avsender.ARBEIDSGIVER
import no.nav.helse.hendelser.Periode.Companion.grupperSammenhengendePerioder
import no.nav.helse.mapWithNext
import no.nav.helse.nesteDag
import no.nav.helse.person.Dokumentsporing
import no.nav.helse.person.ForkastetVedtaksperiode
import no.nav.helse.person.ForkastetVedtaksperiode.Companion.overlapperMed
import no.nav.helse.person.Person
import no.nav.helse.person.Sykmeldingsperioder
import no.nav.helse.person.Vedtaksperiode
import no.nav.helse.person.aktivitetslogg.IAktivitetslogg
import no.nav.helse.person.bel칮p.Bel칮pstidslinje
import no.nav.helse.person.bel칮p.Kilde
import no.nav.helse.person.inntekt.Arbeidstakerinntektskilde
import no.nav.helse.person.inntekt.FaktaavklartInntekt
import no.nav.helse.person.inntekt.Inntektsdata
import no.nav.helse.person.inntekt.Inntektshistorikk
import no.nav.helse.person.inntekt.Inntektsmeldinginntekt
import no.nav.helse.person.inntekt.Inntektsopplysning
import no.nav.helse.person.refusjon.Refusjonsservit칮r
import no.nav.helse.칮konomi.Inntekt

class Inntektsmelding(
    meldingsreferanseId: MeldingsreferanseId,
    private val refusjon: Refusjon,
    orgnummer: String,
    private val beregnetInntekt: Inntekt,
    arbeidsgiverperioder: List<Periode>,
    private val begrunnelseForReduksjonEllerIkkeUtbetalt: String?,
    private val opph칮rAvNaturalytelser: List<Opph칮rAvNaturalytelse>,
    private val harFlereInntektsmeldinger: Boolean,
    private val f칮rsteFrav칝rsdag: LocalDate?,
    mottatt: LocalDateTime
) : Hendelse {

    override val behandlingsporing = Behandlingsporing.Arbeidsgiver(
        organisasjonsnummer = orgnummer
    )
    override val metadata = HendelseMetadata(
        meldingsreferanseId = meldingsreferanseId,
        avsender = ARBEIDSGIVER,
        innsendt = mottatt,
        registrert = mottatt,
        automatiskBehandling = false
    )

    private val grupperteArbeidsgiverperioder = arbeidsgiverperioder.grupperSammenhengendePerioder()
    private val dager by lazy {
        DagerFraInntektsmelding(
            arbeidsgiverperioder = grupperteArbeidsgiverperioder,
            f칮rsteFrav칝rsdag = f칮rsteFrav칝rsdag,
            mottatt = metadata.registrert,
            begrunnelseForReduksjonEllerIkkeUtbetalt = begrunnelseForReduksjonEllerIkkeUtbetalt,
            harFlereInntektsmeldinger = harFlereInntektsmeldinger,
            opph칮rAvNaturalytelser = opph칮rAvNaturalytelser,
            hendelse = this
        )
    }

    internal val inntektsdato: LocalDate by lazy {
        if (f칮rsteFrav칝rsdag != null && (grupperteArbeidsgiverperioder.isEmpty() || f칮rsteFrav칝rsdag > grupperteArbeidsgiverperioder.last().endInclusive.nesteDag)) f칮rsteFrav칝rsdag
        else grupperteArbeidsgiverperioder.maxOf { it.start }
    }

    private val refusjonsdato: LocalDate by lazy {
        if (f칮rsteFrav칝rsdag == null) grupperteArbeidsgiverperioder.maxOf { it.start }
        else grupperteArbeidsgiverperioder.map { it.start }.plus(f칮rsteFrav칝rsdag).max()
    }

    internal val refusjonsservit칮r get() = Refusjonsservit칮r.fra(refusjon.refusjonstidslinje(refusjonsdato, metadata.meldingsreferanseId, metadata.innsendt))

    private var h친ndtertInntekt = false
    val dokumentsporing = Dokumentsporing.inntektsmeldingInntekt(meldingsreferanseId)

    private val inntektsdata = Inntektsdata(metadata.meldingsreferanseId, inntektsdato, beregnetInntekt, metadata.registrert)

    internal fun korrigertInntekt() = FaktaavklartInntekt(
        id = UUID.randomUUID(),
        inntektsdata = inntektsdata,
        inntektsopplysning = Inntektsopplysning.Arbeidstaker(Arbeidstakerinntektskilde.Arbeidsgiver)
    )

    internal fun addInntekt(inntektshistorikk: Inntektshistorikk, aktivitetslogg: IAktivitetslogg, alternativInntektsdato: LocalDate) {
        val inntektsdato = alternativInntektsdato.takeUnless { it == inntektsdato } ?: return
        if (!inntektshistorikk.leggTil(Inntektsmeldinginntekt(UUID.randomUUID(), inntektsdata.copy(dato = inntektsdato), Inntektsmeldinginntekt.Kilde.Arbeidsgiver))) return
        aktivitetslogg.info("Lagrer inntekt p친 alternativ inntektsdato $inntektsdato")
    }

    internal fun addInntekt(inntektshistorikk: Inntektshistorikk, subsumsjonslogg: Subsumsjonslogg): LocalDate {
        subsumsjonslogg.logg(`춶 8-10 ledd 3`(beregnetInntekt.친rlig, beregnetInntekt.daglig))
        inntektshistorikk.leggTil(Inntektsmeldinginntekt(UUID.randomUUID(), inntektsdata.copy(dato = inntektsdato), Inntektsmeldinginntekt.Kilde.Arbeidsgiver))
        return inntektsdato
    }

    internal fun inntektH친ndtert() {
        h친ndtertInntekt = true
    }

    data class Opph칮rAvNaturalytelse(
        val bel칮p: Inntekt,
        val fom: LocalDate,
        val naturalytelse: String
    )

    data class Refusjon(
        val bel칮p: Inntekt?,
        val opph칮rsdato: LocalDate?,
        val endringerIRefusjon: List<EndringIRefusjon> = emptyList()
    ) {

        internal fun refusjonstidslinje(refusjonsdato: LocalDate, meldingsreferanseId: MeldingsreferanseId, tidsstempel: LocalDateTime): Bel칮pstidslinje {
            val kilde = Kilde(meldingsreferanseId, ARBEIDSGIVER, tidsstempel)

            val opph칮rIRefusjon = opph칮rsdato?.let {
                val sisteRefusjonsdag = maxOf(it, refusjonsdato.forrigeDag)
                EndringIRefusjon(Inntekt.INGEN, sisteRefusjonsdag.nesteDag)
            }

            val hovedopplysning = EndringIRefusjon(bel칮p ?: Inntekt.INGEN, refusjonsdato).takeUnless { it.endringsdato == opph칮rIRefusjon?.endringsdato }

            val gyldigeEndringer = endringerIRefusjon
                .filter { it.endringsdato > refusjonsdato }
                .filter { it.endringsdato < (opph칮rIRefusjon?.endringsdato ?: LocalDate.MAX) }
                .distinctBy { it.endringsdato }

            val alleRefusjonsopplysninger = listOfNotNull(hovedopplysning, *gyldigeEndringer.toTypedArray(), opph칮rIRefusjon).sortedBy { it.endringsdato }

            check(alleRefusjonsopplysninger.isNotEmpty()) { "Inntektsmeldingen inneholder ingen refusjonsopplysninger. Hvordan er dette mulig?" }

            return alleRefusjonsopplysninger.mapWithNext { n친v칝rende, neste ->
                val fom = n친v칝rende.endringsdato
                val tom = neste?.endringsdato?.forrigeDag ?: fom
                Bel칮pstidslinje.fra(fom til tom, n친v칝rende.bel칮p, kilde)
            }.reduce(Bel칮pstidslinje::plus)
        }

        data class EndringIRefusjon(val bel칮p: Inntekt, val endringsdato: LocalDate)
    }

    internal fun dager(): DagerFraInntektsmelding {
        return dager
    }

    internal fun ferdigstill(
        aktivitetslogg: IAktivitetslogg,
        person: Person,
        vedtaksperioder: List<Vedtaksperiode>,
        forkastede: List<ForkastetVedtaksperiode>,
        sykmeldingsperioder: Sykmeldingsperioder
    ) {
        if (h친ndtertInntekt) return // Definisjonen av om en inntektsmelding er h친ndtert eller ikke er at vi har h친ndtert inntekten i den... 游뱌
        val relevanteSykmeldingsperioder = sykmeldingsperioder.overlappendePerioder(dager) + sykmeldingsperioder.perioderInnenfor16Dager(dager)
        val overlapperMedForkastet = forkastede.overlapperMed(dager)
        val harPeriodeInnenfor16Dager = dager.harPeriodeInnenfor16Dager(vedtaksperioder)
        if (relevanteSykmeldingsperioder.isNotEmpty() && !overlapperMedForkastet) {
            person.emitInntektsmeldingF칮rS칮knadEvent(metadata.meldingsreferanseId.id, relevanteSykmeldingsperioder, behandlingsporing.organisasjonsnummer)
            return aktivitetslogg.info("Inntektsmelding f칮r s칮knad - er relevant for sykmeldingsperioder $relevanteSykmeldingsperioder")
        }
        aktivitetslogg.info("Inntektsmelding ikke h친ndtert")
        person.emitInntektsmeldingIkkeH친ndtert(this, behandlingsporing.organisasjonsnummer, harPeriodeInnenfor16Dager)
    }

    internal fun skalOppdatereVilk친rsgrunnlag(sykdomstidslinjeperiode: Periode?): Boolean {
        if (sykdomstidslinjeperiode == null) return false // har ikke noe sykdom for arbeidsgiveren
        return inntektsdato in sykdomstidslinjeperiode
    }
}
